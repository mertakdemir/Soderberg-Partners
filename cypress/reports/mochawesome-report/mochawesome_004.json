{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-25T09:32:36.481Z",
    "end": "2025-02-25T09:32:36.717Z",
    "duration": 236,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "26458655-a427-4b01-a97c-ed260f415f22",
      "title": "",
      "fullFile": "cypress\\e2e\\Tests\\API\\scenario4ValidatePagination.cy.js",
      "file": "cypress\\e2e\\Tests\\API\\scenario4ValidatePagination.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6d3f6932-c189-4c07-b260-50ad6af96980",
          "title": "Validate Pagination",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verification of responses",
              "fullTitle": "Validate Pagination Verification of responses",
              "timedOut": null,
              "duration": 76,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: validatePaginationURL2,\n  method: 'GET'\n}).then(response => {\n  expect(response.status).to.eq(200);\n  //Assert the number of users\n  const ids = response.body.data.map(user => user.id); //Gets the all Id's into a map container\n  const uniqueIds = new Set(ids); //To make sure each Id is unique, I putted all of them into a Set container\n  expect(uniqueIds.size).to.eq(6); // Assert that all of Id is unique. Since all of them are uniqe, if the assertion is true it will give us the correct number of users\n  //Assert if fields in the response contain accurate values\n  expect(response.body.per_page).to.equal(6);\n  expect(response.body.total_pages).to.equal(2);\n});",
              "err": {},
              "uuid": "7d27c403-0e95-44aa-be56-79cf694d8972",
              "parentUUID": "6d3f6932-c189-4c07-b260-50ad6af96980",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e5c33302-755e-4b6a-8977-3afabb5c5908",
              "title": "Verify users on different pages are unique",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetches page 1 and page 2 and ensures users are unique",
                  "fullTitle": "Validate Pagination Verify users on different pages are unique Fetches page 1 and page 2 and ensures users are unique",
                  "timedOut": null,
                  "duration": 113,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let page1UserIds = [];\nlet page2UserIds = [];\ncy.request('GET', validatePaginationURL1).then(response1 => {\n  //This is another format of usage for \"cy.request() method\"\n  expect(response1.status).to.eq(200);\n  page1UserIds = response1.body.data.map(user => user.id); // Get's the Id's from page 1 and puts them into a map container\n  cy.request('GET', validatePaginationURL2).then(response2 => {\n    expect(response2.status).to.eq(200);\n    page2UserIds = response2.body.data.map(user => user.id); // Get's the Id's from page 2 and puts them into a map container\n    const commonUsers = page1UserIds.filter(id => page2UserIds.includes(id));\n    expect(commonUsers.length).to.eq(0); // There shouldn't be same ID -> If it gives us 0 which means there is no common Id in those pages\n  });\n});",
                  "err": {},
                  "uuid": "254fc4e2-77fd-4bdc-b048-2897148dd625",
                  "parentUUID": "e5c33302-755e-4b6a-8977-3afabb5c5908",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "254fc4e2-77fd-4bdc-b048-2897148dd625"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "7d27c403-0e95-44aa-be56-79cf694d8972"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 76,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}