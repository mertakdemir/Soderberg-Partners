{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-25T09:32:38.657Z",
    "end": "2025-02-25T09:32:38.919Z",
    "duration": 262,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "02a4a915-8c15-4d8e-9013-8c0d213451c9",
      "title": "",
      "fullFile": "cypress\\e2e\\Tests\\API\\scenario5UserValidation.cy.js",
      "file": "cypress\\e2e\\Tests\\API\\scenario5UserValidation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a33c1f39-9405-42ee-b76c-58f101f72e43",
          "title": "Verify user details from list and individual request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensures user with id 7 has the same details in both responses",
              "fullTitle": "Verify user details from list and individual request Ensures user with id 7 has the same details in both responses",
              "timedOut": null,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userFromList = null;\n// Get the list of all users in page 2\ncy.request('GET', getUserDataListURL).then(response => {\n  expect(response.status).to.eq(200);\n  // Find the user whose id is 7\n  userFromList = response.body.data.find(user => user.id === 7);\n  expect(userFromList).to.not.be.undefined; // Verify that user:7 is exist\n  // Do the specific request for same user to get data\n  cy.request('GET', getSpecificUserDataURL).then(userResponse => {\n    expect(userResponse.status).to.eq(200);\n    const userFromRequest = userResponse.body.data;\n    // Assert that data's from different requests are same\n    expect(userFromRequest.id).to.equal(userFromList.id);\n    expect(userFromRequest.email).to.equal(userFromList.email);\n    expect(userFromRequest.first_name).to.equal(userFromList.first_name);\n    expect(userFromRequest.last_name).to.equal(userFromList.last_name);\n    expect(userFromRequest.avatar).to.equal(userFromList.avatar);\n    /*\n    Try to think any possible way of completing this task in a not correct way. This can be a couple of\n    paragraphs (just text).\n      1-) I would choose a non-exist user id and test that if I get error or 404 Not Found as a response\n        By the help of that, I would be sure that system works for only existing user id's.\n    \n    2-) I would also test to assert different user id's. I would get user 7 for the first part and user 8 for the second part\n        Then I would be able to do the assertion for different users, so I ll be sure that system can get the data for each user and \n        it can read it in a correct way. I can assert that those 2 data's from different users do not match. Otherwise it might be considered as a defect    \n    */\n  });\n});",
              "err": {},
              "uuid": "2e5d2cb5-8a92-498d-ac43-0c066e5209f5",
              "parentUUID": "a33c1f39-9405-42ee-b76c-58f101f72e43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e5d2cb5-8a92-498d-ac43-0c066e5209f5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}